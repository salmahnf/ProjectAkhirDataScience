knitr::opts_chunk$set(echo = TRUE)
# Import Library
library(tidyverse)
library(tidymodels)
library(caret)
library(randomForest)
library(ggplot2)
# Memuat dataset yang telah dibersihkan
data <- read.csv("rumah_cleaned.csv")
# Melihat 6 baris pertama dari dataset
head(data)
View(data)
View(data)
gc()
# Menambah fitur harga per meter persegi (price per square meter)
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
# Menambah rasio luas bangunan terhadap luas tanah
data$building_to_land_ratio <- data$luas_bangunan / data$luas_tanah
# Melihat hasil perubahan data
head(data)
View(data)
# Membagi data menjadi fitur (X) dan target (y)
X <- data %>% select(-price)  # Semua kolom kecuali 'price'
y <- data$price  # Target adalah kolom 'price'
# Membagi data menjadi training dan testing set
set.seed(42)
train_index <- sample(1:nrow(X), size = 0.8 * nrow(X))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
View(X_test)
View(X_train)
# Membuat model Random Forest
rf_model <- randomForest(x = X_train, y = y_train, ntree = 100, random_state = 42)
# Melihat hasil model
rf_model
# Memprediksi harga dengan model Random Forest
rf_pred <- predict(rf_model, X_test)
# Menghitung evaluasi model
rf_mae <- mean(abs(rf_pred - y_test))  # Mean Absolute Error
rf_mse <- mean((rf_pred - y_test)^2)  # Mean Squared Error
rf_r2 <- 1 - sum((rf_pred - y_test)^2) / sum((y_test - mean(y_test))^2)  # R² Score
# Menampilkan hasil evaluasi
cat("Random Forest MAE:", rf_mae, "\n")
cat("Random Forest MSE:", rf_mse, "\n")
cat("Random Forest R²:", rf_r2, "\n")
# Menghitung RMSE (Root Mean Squared Error)
rf_rmse <- sqrt(rf_mse)
# Menampilkan RMSE
cat("Random Forest RMSE:", rf_rmse, "\n")
# Menyusun data metrik evaluasi ke dalam data frame
evaluation_metrics <- data.frame(
Metric = c("MAE", "MSE", "RMSE", "R²"),
Value = c(rf_mae, rf_mse, rf_rmse, rf_r2)
)
# Menampilkan data frame untuk memeriksa nilai-nilai metrik
print(evaluation_metrics)
# Membuat bar plot untuk menampilkan metrik evaluasi
ggplot(evaluation_metrics, aes(x = Metric, y = Value, color = Metric)) +
geom_point(size = 4) +  # Membuat titik scatter
labs(title = "Model Performance Evaluation",
x = "Evaluation Metric",
y = "Value") +
theme_minimal() +
scale_color_brewer(palette = "Set3")  # Menambahkan warna untuk titik
mean(data$price)
# Menambah fitur harga per meter persegi (price per square meter)
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
# Menambah rasio luas bangunan terhadap luas tanah
data$building_to_land_ratio <- data$luas_bangunan / data$luas_tanah
# Melihat hasil perubahan data
head(data)
mean(data$price)
# Menambah fitur harga per meter persegi (price per square meter)
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
# Menambah rasio luas bangunan terhadap luas tanah
data$building_to_land_ratio <- data$luas_bangunan / data$luas_tanah
# Melihat hasil perubahan data
head(data)
# Import Library
library(tidyverse)
library(tidymodels)
library(caret)
library(randomForest)
library(ggplot2)
# Memuat dataset yang telah dibersihkan
data <- read.csv("rumah_cleaned.csv")
# Melihat 6 baris pertama dari dataset
head(data)
mean(data$price)
# Menambah fitur harga per meter persegi (price per square meter)
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
# Menambah rasio luas bangunan terhadap luas tanah
data$building_to_land_ratio <- data$luas_bangunan / data$luas_tanah
# Melihat hasil perubahan data
head(data)
# Import Library
library(tidyverse)
library(tidymodels)
library(caret)
library(randomForest)
library(ggplot2)
# Memuat dataset yang telah dibersihkan
data <- read.csv("rumah_cleaned.csv")
# Melihat 6 baris pertama dari dataset
head(data)
# Menambah fitur harga per meter persegi (price per square meter)
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
# Menambah rasio luas bangunan terhadap luas tanah
data$building_to_land_ratio <- data$luas_bangunan / data$luas_tanah
# Melihat hasil perubahan data
head(data)
# Identifikasi dan hapus outlier berdasarkan IQR
Q1 <- quantile(data$price, 0.25)
Q3 <- quantile(data$price, 0.75)
IQR <- Q3 - Q1
# Hitung batas bawah dan batas atas untuk outlier
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Hapus outlier (data yang berada di luar batas bawah dan atas)
data_clean <- data %>% filter(price >= lower_bound & price <= upper_bound)
# Visualisasi boxplot setelah menghapus outlier
ggplot(data_clean, aes(x = "", y = price)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8) +
labs(title = "Boxplot Harga Rumah Setelah Menghapus Outlier", y = "Harga Rumah")
View(data_clean)
View(data_clean)
View(data)
View(data_clean)
View(data)
# Membagi data menjadi fitur (X) dan target (y)
X <- data_clean %>% select(-price)  # Semua kolom kecuali 'price'
y <- data_clean$price  # Target adalah kolom 'price'
# Membagi data menjadi training dan testing set
set.seed(42)
train_index <- sample(1:nrow(X), size = 0.8 * nrow(X))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# Membuat model Random Forest
rf_model <- randomForest(x = X_train, y = y_train, ntree = 100, random_state = 42)
# Melihat hasil model
print(rf_model)
# Memprediksi harga dengan model Random Forest
rf_pred <- predict(rf_model, X_test)
# Menghitung evaluasi model
rf_mae <- mean(abs(rf_pred - y_test))  # Mean Absolute Error
rf_mse <- mean((rf_pred - y_test)^2)  # Mean Squared Error
rf_r2 <- 1 - sum((rf_pred - y_test)^2) / sum((y_test - mean(y_test))^2)  # R² Score
# Menampilkan hasil evaluasi
cat("Random Forest MAE:", rf_mae, "\n")
cat("Random Forest MSE:", rf_mse, "\n")
cat("Random Forest R²:", rf_r2, "\n")
# Menghitung RMSE (Root Mean Squared Error)
rf_rmse <- sqrt(rf_mse)
# Menampilkan RMSE
cat("Random Forest RMSE:", rf_rmse, "\n")
# Menyusun data metrik evaluasi ke dalam data frame
evaluation_metrics <- data.frame(
Metric = c("MAE", "MSE", "RMSE", "R²"),
Value = c(rf_mae, rf_mse, rf_rmse, rf_r2)
)
# Menampilkan data frame untuk memeriksa nilai-nilai metrik
print(evaluation_metrics)
# Membuat bar plot untuk menampilkan metrik evaluasi
ggplot(evaluation_metrics, aes(x = Metric, y = Value, color = Metric)) +
geom_point(size = 4) +  # Membuat titik scatter
labs(title = "Model Performance Evaluation",
x = "Evaluation Metric",
y = "Value") +
theme_minimal() +
scale_color_brewer(palette = "Set3")  # Menambahkan warna untuk titik
# Membagi data menjadi fitur (X) dan target (y)
X <- data_clean %>% select(-price)  # Semua kolom kecuali 'price'
y <- data_clean$price  # Target adalah kolom 'price'
# Membagi data menjadi training dan testing set
set.seed(123)
train_index <- sample(1:nrow(X), size = 0.8 * nrow(X))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# Membuat model Random Forest
rf_model <- randomForest(x = X_train, y = y_train, ntree = 100, random_state = 42)
# Melihat hasil model
print(rf_model)
# Memprediksi harga dengan model Random Forest
rf_pred <- predict(rf_model, X_test)
# Menghitung evaluasi model
rf_mae <- mean(abs(rf_pred - y_test))  # Mean Absolute Error
rf_mse <- mean((rf_pred - y_test)^2)  # Mean Squared Error
rf_r2 <- 1 - sum((rf_pred - y_test)^2) / sum((y_test - mean(y_test))^2)  # R² Score
# Menampilkan hasil evaluasi
cat("Random Forest MAE:", rf_mae, "\n")
cat("Random Forest MSE:", rf_mse, "\n")
cat("Random Forest R²:", rf_r2, "\n")
# Menghitung RMSE (Root Mean Squared Error)
rf_rmse <- sqrt(rf_mse)
# Menampilkan RMSE
cat("Random Forest RMSE:", rf_rmse, "\n")
# Menyusun data metrik evaluasi ke dalam data frame
evaluation_metrics <- data.frame(
Metric = c("MAE", "MSE", "RMSE", "R²"),
Value = c(rf_mae, rf_mse, rf_rmse, rf_r2)
)
# Menampilkan data frame untuk memeriksa nilai-nilai metrik
print(evaluation_metrics)
# Membuat bar plot untuk menampilkan metrik evaluasi
ggplot(evaluation_metrics, aes(x = Metric, y = Value, color = Metric)) +
geom_point(size = 4) +  # Membuat titik scatter
labs(title = "Model Performance Evaluation",
x = "Evaluation Metric",
y = "Value") +
theme_minimal() +
scale_color_brewer(palette = "Set3")  # Menambahkan warna untuk titik
