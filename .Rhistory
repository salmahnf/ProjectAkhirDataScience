set.seed(123)
train_index <- sample(1:nrow(X), size = 0.8 * nrow(X))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# Membuat model Random Forest
rf_model <- randomForest(x = X_train, y = y_train, ntree = 100, random_state = 42)
# Melihat hasil model
print(rf_model)
# Memprediksi harga dengan model Random Forest
rf_pred <- predict(rf_model, X_test)
# Menghitung evaluasi model
rf_mae <- mean(abs(rf_pred - y_test))  # Mean Absolute Error
rf_mse <- mean((rf_pred - y_test)^2)  # Mean Squared Error
rf_r2 <- 1 - sum((rf_pred - y_test)^2) / sum((y_test - mean(y_test))^2)  # R² Score
# Menampilkan hasil evaluasi
cat("Random Forest MAE:", rf_mae, "\n")
cat("Random Forest MSE:", rf_mse, "\n")
cat("Random Forest R²:", rf_r2, "\n")
# Menghitung RMSE (Root Mean Squared Error)
rf_rmse <- sqrt(rf_mse)
# Menampilkan RMSE
cat("Random Forest RMSE:", rf_rmse, "\n")
# Menyusun data metrik evaluasi ke dalam data frame
evaluation_metrics <- data.frame(
Metric = c("MAE", "MSE", "RMSE", "R²"),
Value = c(rf_mae, rf_mse, rf_rmse, rf_r2)
)
# Menampilkan data frame untuk memeriksa nilai-nilai metrik
print(evaluation_metrics)
# Membuat bar plot untuk menampilkan metrik evaluasi
ggplot(evaluation_metrics, aes(x = Metric, y = Value, color = Metric)) +
geom_point(size = 4) +  # Membuat titik scatter
labs(title = "Model Performance Evaluation",
x = "Evaluation Metric",
y = "Value") +
theme_minimal() +
scale_color_brewer(palette = "Set3")  # Menambahkan warna untuk titik
knitr::opts_chunk$set(echo = TRUE)
# Import Library
library(tidyverse)
library(tidymodels)
library(caret)
library(randomForest)
library(ggplot2)
# Memuat dataset yang telah dibersihkan
data <- read.csv("rumah_cleaned.csv")
# Melihat 6 baris pertama dari dataset
head(data)
# Menambah fitur harga per meter persegi (price per square meter)
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
# Menambah rasio luas bangunan terhadap luas tanah
data$building_to_land_ratio <- data$luas_bangunan / data$luas_tanah
# Melihat hasil perubahan data
head(data)
# Identifikasi dan hapus outlier berdasarkan IQR
Q1 <- quantile(data$price, 0.25)
Q3 <- quantile(data$price, 0.75)
IQR <- Q3 - Q1
# Hitung batas bawah dan batas atas untuk outlier
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Hapus outlier (data yang berada di luar batas bawah dan atas)
data_clean <- data %>% filter(price >= lower_bound & price <= upper_bound)
# Visualisasi boxplot setelah menghapus outlier
ggplot(data_clean, aes(x = "", y = price)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8) +
labs(title = "Boxplot Harga Rumah Setelah Menghapus Outlier", y = "Harga Rumah")
# Membagi data menjadi fitur (X) dan target (y)
X <- data_clean %>% select(-price)  # Semua kolom kecuali 'price'
y <- data_clean$price  # Target adalah kolom 'price'
# Membagi data menjadi training dan testing set
set.seed(123)
train_index <- sample(1:nrow(X), size = 0.8 * nrow(X))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# Membuat model Random Forest
rf_model <- randomForest(x = X_train, y = y_train, ntree = 100, random_state = 42)
# Melihat hasil model
print(rf_model)
# Memprediksi harga dengan model Random Forest
rf_pred <- predict(rf_model, X_test)
# Menghitung evaluasi model
rf_mae <- mean(abs(rf_pred - y_test))  # Mean Absolute Error
rf_mse <- mean((rf_pred - y_test)^2)  # Mean Squared Error
rf_r2 <- 1 - sum((rf_pred - y_test)^2) / sum((y_test - mean(y_test))^2)  # R² Score
# Menampilkan hasil evaluasi
cat("Random Forest MAE:", rf_mae, "\n")
cat("Random Forest MSE:", rf_mse, "\n")
cat("Random Forest R²:", rf_r2, "\n")
# Menghitung RMSE (Root Mean Squared Error)
rf_rmse <- sqrt(rf_mse)
# Menampilkan RMSE
cat("Random Forest RMSE:", rf_rmse, "\n")
# Menyusun data metrik evaluasi ke dalam data frame
evaluation_metrics <- data.frame(
Metric = c("MAE", "MSE", "RMSE", "R²"),
Value = c(rf_mae, rf_mse, rf_rmse, rf_r2)
)
# Menampilkan data frame untuk memeriksa nilai-nilai metrik
print(evaluation_metrics)
# Membuat bar plot untuk menampilkan metrik evaluasi
ggplot(evaluation_metrics, aes(x = Metric, y = Value, color = Metric)) +
geom_point(size = 4) +  # Membuat titik scatter
labs(title = "Model Performance Evaluation",
x = "Evaluation Metric",
y = "Value") +
theme_minimal() +
scale_color_brewer(palette = "Set3")  # Menambahkan warna untuk titik
# Memuat library yang diperlukan
library(caret)
library(randomForest)
# Menentukan grid untuk hyperparameter tuning
tune_grid <- expand.grid(mtry = c(2, 3, 4, 5, 6))  # Coba berbagai nilai mtry
# Cross-validation untuk Random Forest dengan 10-fold
rf_grid_search <- train(price ~ ., data = train_data,
method = "rf",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = tune_grid)
# Import library tambahan jika belum
library(corrplot)
install.packages("corrplot")
# Import library tambahan jika belum
library(corrplot)
## 1. Distribusi Harga Rumah
ggplot(data_clean, aes(x = price)) +
geom_histogram(binwidth = 50000000, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribusi Harga Rumah", x = "Harga (IDR)", y = "Frekuensi") +
theme_minimal()
## 2. Korelasi Antar Fitur Numerik
numeric_features <- data_clean %>% select_if(is.numeric)
# Menghitung korelasi antar fitur numerik
cor_matrix <- cor(numeric_features)
# Visualisasi matriks korelasi
corrplot(cor_matrix, method = "circle", type = "upper", tl.cex = 0.8, tl.col = "black", title = "Korelasi Antar Fitur", mar = c(0, 0, 2, 0))
## 3. Visualisasi Outlier pada Harga Rumah (Boxplot)
ggplot(data_clean, aes(x = "", y = price)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8) +
labs(title = "Boxplot Harga Rumah", y = "Harga Rumah (IDR)") +
theme_minimal()
## 4. Fitur Terhadap Harga: Luas Tanah dan Luas Bangunan
ggplot(data_clean, aes(x = luas_tanah, y = price)) +
geom_point(alpha = 0.5, color = "darkblue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga Rumah terhadap Luas Tanah", x = "Luas Tanah (m²)", y = "Harga Rumah (IDR)") +
theme_minimal()
ggplot(data_clean, aes(x = luas_bangunan, y = price)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga Rumah terhadap Luas Bangunan", x = "Luas Bangunan (m²)", y = "Harga Rumah (IDR)") +
theme_minimal()
## 5. Perbandingan Antara Prediksi dan Nilai Aktual
# Membuat data frame untuk perbandingan
comparison_df <- data.frame(Actual = y_test, Predicted = rf_pred)
ggplot(comparison_df, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.5, color = "blue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Perbandingan antara Harga Aktual dan Prediksi", x = "Harga Aktual (IDR)", y = "Harga Prediksi (IDR)") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
install.packages("pheatmap")
library(tidyverse)
library(tidymodels)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(gridExtra)
install.packages("gridExtra")
library(tidyverse)
library(tidymodels)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(gridExtra)
library(scales)
library(patchwork)
library(tidyverse)
library(tidymodels)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
library(gridExtra)
library(scales)
library(patchwork)
stolen_vehicles = read.csv("stolen_vehicles.csv")
make_details = read.csv("make_details.csv")
locations = read.csv("locations.csv")
stolen_vehicles
make_details
locations
merged_data <- make_details %>%
inner_join(stolen_vehicles, by = "make_id") %>%
inner_join(locations, by = "location_id")
merged_data
# Periksa tipe data awal
str(merged_data)
# Hapus tanda koma dan ubah menjadi numerik
merged_data <- merged_data %>%
mutate(
population = as.numeric(gsub(",", "", population)), # Menghapus koma pada kolom population
date_stolen = mdy(date_stolen) # Mengonversi kolom date_stolen ke Date menggunakan mdy()
)
# Periksa hasil konversi
str(merged_data)
# Memeriksa apakah ada missing value (NA)
colSums(is.na(stolen_vehicles))
colSums(is.na(make_details))
colSums(is.na(locations))
colSums(is.na(merged_data))
# Cari baris yang memiliki setidaknya satu nilai kosong
rows_with_na <- which(rowSums(is.na(stolen_vehicles)) > 0)
# Menampilkan baris-baris tersebut
rows_with_na
# Ganti string kosong atau hanya spasi dengan NA
merged_data <- merged_data %>%
mutate(across(everything(), ~ na_if(trimws(.), "")))
# Cek jumlah missing value setelah konversi
sapply(merged_data, function(x) sum(is.na(x)))
# Ganti NA dengan nilai tertentu (contoh: 0 untuk kolom numerik)
merged_data <- merged_data %>%
mutate(across(where(is.numeric), ~ replace_na(., 0)))
# Ganti string kosong atau hanya spasi dengan NA
merged_data <- merged_data %>%
mutate(across(everything(), ~ na_if(trimws(.), "")))
# Cek jumlah missing value setelah konversi
sapply(merged_data, function(x) sum(is.na(x)))
# Ganti NA dengan nilai tertentu (contoh: 0 untuk kolom numerik)
merged_data <- merged_data %>%
mutate(across(where(is.numeric), ~ replace_na(., 0)))
# Hapus baris yang mengandung NA
merged_data <- merged_data %>%
drop_na()
# Memeriksa struktur tabel `merged_data`
str(merged_data)
# Memeriksa apakah masih ada missing value di tabel
colSums(is.na(merged_data))
region_risk <- merged_data %>%
group_by(region) %>%
summarise(count = n()) %>%
arrange(desc(count))
region_risk
# Membuat bar chart menggunakan ggplot2
ggplot(region_risk, aes(x = reorder(region, -count), y = count, fill = region)) +
geom_bar(stat = "identity", show.legend = FALSE) +  # Bar chart tanpa legenda
labs(title = "Risiko Pencurian Berdasarkan Wilayah",
x = "Wilayah", y = "Jumlah Pencurian") +
theme_minimal() +                                  # Tema minimal
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Menggabungkan dataset dan membuat dataframe wilayah
regions <- locations %>%
inner_join(region_risk, by = "region")
# Mengubah density dan population menjadi angka, menangani kemungkinan NA
regions <- regions %>%
mutate(
density = as.numeric(gsub(",", "", as.character(density))),  # Remove commas if present
population = as.numeric(gsub(",", "", as.character(population)))  # Remove commas if present
)
# Membuat fungsi normalisasi Min-Max
normalize <- function(x) {
if (all(is.na(x))) return(x) # Return as is if all values are NA
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
# Memilih kolom numerik untuk analisis
numeric_cols <- c("population", "density", "count")
# Mengubah ke format long
original_long <- regions %>%
select(all_of(numeric_cols)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "value")
# Menormalisasi dataset
normalized_data <- regions %>%
mutate(across(all_of(numeric_cols), ~ normalize(.)))
normalized_long <- normalized_data %>%
select(all_of(numeric_cols)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "value")
original_long
normalized_long
# Boxplot theme
custom_theme <- theme_minimal() +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12, face = "bold"),
plot.margin = margin(20, 20, 20, 20),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
# Simpan data ke file CSV
# write.csv(regions, "regions.csv", row.names = FALSE)
# File akan disimpan di direktori kerja Anda saat ini
# getwd()  # Periksa direktori kerja
# Tambahkan kolom waktu (format DateTime)
data <- merged_data %>%
mutate(theft_date = as.Date(date_stolen),  # Ubah sesuai nama kolom tanggal Anda
month_year = format(theft_date, "%b %Y"))  # Kombinasi bulan dan tahun
# Filter data untuk periode tertentu (Oktober 2021 - April 2022)
data_filtered <- data %>%
filter(theft_date >= as.Date("2021-10-01") & theft_date <= as.Date("2022-04-30"))
# Distribusi pencurian berdasarkan bulan dan tahun
monthly_theft <- data_filtered %>%
group_by(month_year) %>%
summarise(count = n()) %>%
mutate(month_year = factor(month_year, levels = c(
"Oct 2021", "Nov 2021", "Dec 2021", "Jan 2022", "Feb 2022", "Mar 2022", "Apr 2022"
))) %>%  # Pastikan urutannya benar
arrange(month_year)
monthly_theft
# Visualisasi
ggplot(monthly_theft, aes(x = month_year, y = count, group = 1)) +
geom_line(color = "steelblue", size = 1) +                  # Menambahkan garis
geom_point(color = "steelblue", size = 2) +                # Titik pada setiap bulan
labs(title = "Distribusi Pencurian Kendaraan per Bulan dan Tahun",
x = "Bulan dan Tahun", y = "Jumlah Pencurian") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))   # Memiringkan label x
# Transformasi data
time_region_data <- data %>%
filter(!is.na(region) & !is.na(month_year)) %>%
group_by(month_year, region) %>%
summarise(count = n(), .groups = "drop") %>%
pivot_wider(names_from = region, values_from = count, values_fill = 0) %>%
arrange(factor(month_year, levels = c(
"Oct 2021", "Nov 2021", "Dec 2021", "Jan 2022", "Feb 2022", "Mar 2022", "Apr 2022"
)))  # Urutkan bulan
# Konversi ke matriks
time_region_matrix <- as.matrix(time_region_data[, -1])  # Hilangkan kolom bulan
rownames(time_region_matrix) <- as.character(time_region_data$month_year)
# Warna heatmap
heatmap_colors <- colorRampPalette(brewer.pal(9, "Reds"))(100)
# Plot heatmap
pheatmap(
time_region_matrix,
cluster_rows = FALSE,  # Tidak mengelompokkan baris
cluster_cols = TRUE,   # Mengelompokkan kolom
display_numbers = TRUE,  # Tampilkan angka pada kotak
color = heatmap_colors,
main = "Distribusi Pencurian per Bulan dan Wilayah",
fontsize_row = 10,   # Ukuran teks baris
fontsize_col = 10,   # Ukuran teks kolom
number_format = "%.0f",  # Format angka tanpa desimal
legend = TRUE        # Tampilkan legenda
)
# Ubah kolom density dan population menjadi numerik
merged_data$density <- as.numeric(as.character(merged_data$density))
merged_data$population <- as.numeric(as.character(merged_data$population))
# Agregasi data: menghitung jumlah pencurian per wilayah
region_theft_data <- merged_data %>%
group_by(region) %>%
summarise(
theft_count = n(),
population = first(population),
density = first(density)
)
# Buat kolom theft_rate per 1.000 orang
region_theft_data <- region_theft_data %>%
mutate(theft_rate = (theft_count / population) * 1000)
# Visualisasi hubungan antara theft_rate dengan density dan population
# Theft Rate vs Density
ggplot(region_theft_data, aes(x = density, y = theft_rate, color = region)) +
geom_point(size = 3) +
labs(
title = "Tingkat Pencurian vs Kepadatan",
x = "Kepadatan Populasi (orang/km²)",
y = "Tingkat Pencurian (per 1,000 orang)"
) +
theme_minimal()
# Theft Rate vs Population
ggplot(region_theft_data, aes(x = population, y = theft_rate, color = region)) +
geom_point(size = 3) +
labs(
title = "Tingkat Pencurian vs Populasi",
x = "Populasi",
y = "Tingkat Pencurian (per 1,000 orang)"
) +
theme_minimal()
# Data preprocessing: Mneghitung pencurian berdasarkan `make_type`
theft_data <- merged_data %>%
group_by(make_type) %>%
summarise(theft_count = n()) %>%
arrange(desc(theft_count))
theft_data
# Visualisasi: Bar plot berdasarkan `make_type`
ggplot(theft_data, aes(x = reorder(make_type, -theft_count), y = theft_count, fill = make_type)) +
geom_bar(stat = "identity") +
labs(
title = "Hubungan Antara Manufacturer dengan Jumlah Pencurian",
x = "Manufacturer",
y = "Jumlah Pencurian"
) +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
scale_fill_brewer(palette = "Set3")
# Distribusi jenis kendaraan
vehicle_distribution <- merged_data %>%
group_by(vehicle_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(percentage = count / sum(count) * 100)
vehicle_distribution
# Plot distribusi jenis kendaraan
ggplot(vehicle_distribution, aes(x = reorder(vehicle_type, -count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Distribusi Jenis Kendaraan yang Dicuri",
x = "Jenis Kendaraan",
y = "Jumlah Pencurian") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Import Library
library(tidyverse)
library(corrplot)
library(randomForest)
library(ggplot2)
# Memuat dataset yang telah dibersihkan
data <- read.csv("rumah_cleaned.csv")
# 1. Distribusi Harga Rumah
ggplot(data, aes(x = price)) +
geom_histogram(binwidth = 50000000, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..count..), fill = "green", alpha = 0.3) +
labs(title = "Distribusi Harga Rumah", x = "Harga (IDR)", y = "Frekuensi") +
theme_minimal()
# 2. Korelasi Antar Fitur Numerik
cor_matrix <- cor(data %>% select_if(is.numeric))
corrplot(cor_matrix, method = "circle", type = "upper", tl.cex = 0.8, tl.col = "black", title = "Korelasi Antar Fitur", mar = c(0, 0, 2, 0))
# 3. Boxplot Harga Rumah
ggplot(data, aes(x = "", y = price)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8) +
labs(title = "Boxplot Harga Rumah", y = "Harga Rumah (IDR)") +
theme_minimal()
# 4. Hubungan Harga Rumah dengan Luas Tanah
ggplot(data, aes(x = luas_tanah, y = price)) +
geom_point(alpha = 0.5, color = "darkblue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga Rumah terhadap Luas Tanah", x = "Luas Tanah (m²)", y = "Harga Rumah (IDR)") +
theme_minimal()
# 5. Hubungan Harga Rumah dengan Luas Bangunan
ggplot(data, aes(x = luas_bangunan, y = price)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga Rumah terhadap Luas Bangunan", x = "Luas Bangunan (m²)", y = "Harga Rumah (IDR)") +
theme_minimal()
# 6. Harga per Meter Persegi terhadap Harga Rumah
data$price_per_m2 <- data$price / (data$luas_tanah + 1)  # Menambahkan 1 untuk menghindari pembagian dengan 0
ggplot(data, aes(x = price_per_m2, y = price)) +
geom_point(alpha = 0.5, color = "purple") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga per Meter Persegi terhadap Harga Rumah", x = "Harga per Meter Persegi (IDR)", y = "Harga Rumah (IDR)") +
theme_minimal()
# 7. Perbandingan Prediksi dan Nilai Aktual
comparison_df <- data.frame(Actual = y_test, Predicted = rf_pred)
ggplot(comparison_df, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.5, color = "blue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Perbandingan antara Harga Aktual dan Prediksi", x = "Harga Aktual (IDR)", y = "Harga Prediksi (IDR)") +
theme_minimal()
# 8. Distribusi Luas Tanah
ggplot(data, aes(x = luas_tanah)) +
geom_histogram(binwidth = 50, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Distribusi Luas Tanah", x = "Luas Tanah (m²)", y = "Frekuensi") +
theme_minimal()
# 9. Hubungan Rasio Bangunan dan Tanah dengan Harga Rumah
ggplot(data, aes(x = building_to_land_ratio, y = price)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga Rumah terhadap Rasio Bangunan ke Tanah", x = "Rasio Bangunan ke Tanah", y = "Harga Rumah (IDR)") +
theme_minimal()
# Korelasi Antar Fitur Numerik
cor_matrix <- cor(data %>% select_if(is.numeric))
# Membuat heatmap dari matriks korelasi
corrplot(cor_matrix, method = "circle", type = "upper",
tl.cex = 0.8, tl.col = "black", title = "Korelasi Antar Fitur",
mar = c(0, 0, 2, 0))
# Bar Plot untuk Fitur Kategorikal
ggplot(data, aes(x = factor(tipe_properti))) +  # Gantilah 'tipe_properti' dengan kolom kategorikal lain jika ada
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribusi Tipe Properti", x = "Tipe Properti", y = "Frekuensi") +
theme_minimal()
# Bar Chart untuk Harga Rumah berdasarkan Fitur Kategorikal (misal: Tipe Properti)
ggplot(data, aes(x = factor(tipe_properti), y = price)) +  # Gantilah 'tipe_properti' dengan fitur kategorikal yang relevan
geom_bar(stat = "summary", fun = "mean", fill = "darkblue", color = "black") +
labs(title = "Rata-rata Harga Rumah berdasarkan Tipe Properti",
x = "Tipe Properti", y = "Rata-rata Harga Rumah (IDR)") +
theme_minimal()
# Scatter Plot untuk Harga Rumah terhadap Luas Tanah
ggplot(data, aes(x = luas_tanah, y = price)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Harga Rumah terhadap Luas Tanah", x = "Luas Tanah (m²)", y = "Harga Rumah (IDR)") +
theme_minimal()
ggplot(data, aes(x = price)) +
geom_histogram(binwidth = 50000000, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..count..), fill = "green", alpha = 0.3) +
labs(title = "Distribusi Harga Rumah", x = "Harga (IDR)", y = "Frekuensi") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
ggplot(data, aes(x = price)) +
geom_histogram(binwidth = 50000000, fill = "skyblue", color = "black", alpha = 0.7)
